/**
 * @fileoverview gRPC-Web generated client stub for com.example.company
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: company.proto

// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.com = {};
proto.com.example = {};
proto.com.example.company = require('./company_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.example.company.CompanyServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.example.company.CompanyServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.example.company.Company,
 *   !proto.com.example.company.CompanyResponse>}
 */
const methodDescriptor_CompanyService_createCompany = new grpc.web.MethodDescriptor(
  '/com.example.company.CompanyService/createCompany',
  grpc.web.MethodType.UNARY,
  proto.com.example.company.Company,
  proto.com.example.company.CompanyResponse,
  /**
   * @param {!proto.com.example.company.Company} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.example.company.CompanyResponse.deserializeBinary
);


/**
 * @param {!proto.com.example.company.Company} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.example.company.CompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.example.company.CompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.example.company.CompanyServiceClient.prototype.createCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.example.company.CompanyService/createCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_createCompany,
      callback);
};


/**
 * @param {!proto.com.example.company.Company} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.example.company.CompanyResponse>}
 *     Promise that resolves to the response
 */
proto.com.example.company.CompanyServicePromiseClient.prototype.createCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.example.company.CompanyService/createCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_createCompany);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.example.company.EmptyRequest,
 *   !proto.com.example.company.CompanyListResponse>}
 */
const methodDescriptor_CompanyService_getAllCompanies = new grpc.web.MethodDescriptor(
  '/com.example.company.CompanyService/getAllCompanies',
  grpc.web.MethodType.UNARY,
  proto.com.example.company.EmptyRequest,
  proto.com.example.company.CompanyListResponse,
  /**
   * @param {!proto.com.example.company.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.example.company.CompanyListResponse.deserializeBinary
);


/**
 * @param {!proto.com.example.company.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.example.company.CompanyListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.example.company.CompanyListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.example.company.CompanyServiceClient.prototype.getAllCompanies =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.example.company.CompanyService/getAllCompanies',
      request,
      metadata || {},
      methodDescriptor_CompanyService_getAllCompanies,
      callback);
};


/**
 * @param {!proto.com.example.company.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.example.company.CompanyListResponse>}
 *     Promise that resolves to the response
 */
proto.com.example.company.CompanyServicePromiseClient.prototype.getAllCompanies =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.example.company.CompanyService/getAllCompanies',
      request,
      metadata || {},
      methodDescriptor_CompanyService_getAllCompanies);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.example.company.UpdateCompanyRequest,
 *   !proto.com.example.company.CompanyResponse>}
 */
const methodDescriptor_CompanyService_UpdateCompany = new grpc.web.MethodDescriptor(
  '/com.example.company.CompanyService/UpdateCompany',
  grpc.web.MethodType.UNARY,
  proto.com.example.company.UpdateCompanyRequest,
  proto.com.example.company.CompanyResponse,
  /**
   * @param {!proto.com.example.company.UpdateCompanyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.example.company.CompanyResponse.deserializeBinary
);


/**
 * @param {!proto.com.example.company.UpdateCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.example.company.CompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.example.company.CompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.example.company.CompanyServiceClient.prototype.updateCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.example.company.CompanyService/UpdateCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_UpdateCompany,
      callback);
};


/**
 * @param {!proto.com.example.company.UpdateCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.example.company.CompanyResponse>}
 *     Promise that resolves to the response
 */
proto.com.example.company.CompanyServicePromiseClient.prototype.updateCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.example.company.CompanyService/UpdateCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_UpdateCompany);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.example.company.DeleteCompanyRequest,
 *   !proto.com.example.company.DeleteCompanyResponse>}
 */
const methodDescriptor_CompanyService_DeleteCompany = new grpc.web.MethodDescriptor(
  '/com.example.company.CompanyService/DeleteCompany',
  grpc.web.MethodType.UNARY,
  proto.com.example.company.DeleteCompanyRequest,
  proto.com.example.company.DeleteCompanyResponse,
  /**
   * @param {!proto.com.example.company.DeleteCompanyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.example.company.DeleteCompanyResponse.deserializeBinary
);


/**
 * @param {!proto.com.example.company.DeleteCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.example.company.DeleteCompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.example.company.DeleteCompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.example.company.CompanyServiceClient.prototype.deleteCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.example.company.CompanyService/DeleteCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_DeleteCompany,
      callback);
};


/**
 * @param {!proto.com.example.company.DeleteCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.example.company.DeleteCompanyResponse>}
 *     Promise that resolves to the response
 */
proto.com.example.company.CompanyServicePromiseClient.prototype.deleteCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.example.company.CompanyService/DeleteCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_DeleteCompany);
};


module.exports = proto.com.example.company;

